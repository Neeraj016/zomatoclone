{"ast":null,"code":"import _regeneratorRuntime from \"/Users/neerajchettiar/Documents/FSWD/zomato-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/neerajchettiar/Documents/FSWD/zomato-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\"; // Redux types\n\nimport { CREATE_ORDER, ORDER_PLACED } from \"./order.type\";\nexport var createOrder = function createOrder(amount) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var order;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios({\n                method: \"POST\",\n                url: \"http://localhost:4000/payments/new\",\n                data: {\n                  amount: amount\n                }\n              });\n\n            case 3:\n              order = _context.sent;\n              return _context.abrupt(\"return\", dispatch({\n                type: CREATE_ORDER,\n                payload: order.data\n              }));\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", dispatch({\n                type: \"ERROR\",\n                payload: _context.t0\n              }));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var orderPlaced = function orderPlaced(cartData) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var placeOrder;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              placeOrder = cartData.map(function (foodItem) {\n                var orderDetails = {\n                  food: foodItem._id,\n                  quantity: foodItem.quantity,\n                  paymode: \"ONLINE\",\n                  paymentDetails: {\n                    itemTotal: foodItem.totalPrice,\n                    promo: 0,\n                    tax: 0\n                  }\n                };\n                axios({\n                  method: \"POST\",\n                  url: \"http://localhost:4000/order/new\",\n                  data: {\n                    orderDetails: orderDetails\n                  }\n                });\n              });\n              _context2.next = 4;\n              return Promise.all(placeOrder);\n\n            case 4:\n              return _context2.abrupt(\"return\", dispatch({\n                type: ORDER_PLACED,\n                payload: {}\n              }));\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              return _context2.abrupt(\"return\", dispatch({\n                type: \"ERROR\",\n                payload: _context2.t0\n              }));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/neerajchettiar/Documents/FSWD/zomato-master/client/src/Redux/Reducer/Order/order.action.js"],"names":["axios","CREATE_ORDER","ORDER_PLACED","createOrder","amount","dispatch","method","url","data","order","type","payload","orderPlaced","cartData","placeOrder","map","foodItem","orderDetails","food","_id","quantity","paymode","paymentDetails","itemTotal","totalPrice","promo","tax","Promise","all"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,cAA3C;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD;AAAA;AAAA,wEAAY,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEfL,KAAK,CAAC;AACxBM,gBAAAA,MAAM,EAAE,MADgB;AAExBC,gBAAAA,GAAG,EAAE,oCAFmB;AAGxBC,gBAAAA,IAAI,EAAE;AAAEJ,kBAAAA,MAAM,EAANA;AAAF;AAHkB,eAAD,CAFU;;AAAA;AAE7BK,cAAAA,KAF6B;AAAA,+CAQ5BJ,QAAQ,CAAC;AAAEK,gBAAAA,IAAI,EAAET,YAAR;AAAsBU,gBAAAA,OAAO,EAAEF,KAAK,CAACD;AAArC,eAAD,CARoB;;AAAA;AAAA;AAAA;AAAA,+CAU5BH,QAAQ,CAAC;AAAEK,gBAAAA,IAAI,EAAE,OAAR;AAAiBC,gBAAAA,OAAO;AAAxB,eAAD,CAVoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAcP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA;AAAA,yEAAc,kBAAOR,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE/BS,cAAAA,UAF+B,GAElBD,QAAQ,CAACE,GAAT,CAAa,UAACC,QAAD,EAAc;AAC5C,oBAAMC,YAAY,GAAG;AACnBC,kBAAAA,IAAI,EAAEF,QAAQ,CAACG,GADI;AAEnBC,kBAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAFA;AAGnBC,kBAAAA,OAAO,EAAE,QAHU;AAInBC,kBAAAA,cAAc,EAAE;AACdC,oBAAAA,SAAS,EAAEP,QAAQ,CAACQ,UADN;AAEdC,oBAAAA,KAAK,EAAE,CAFO;AAGdC,oBAAAA,GAAG,EAAE;AAHS;AAJG,iBAArB;AAUA1B,gBAAAA,KAAK,CAAC;AACJM,kBAAAA,MAAM,EAAE,MADJ;AAEJC,kBAAAA,GAAG,mCAFC;AAGJC,kBAAAA,IAAI,EAAE;AAAES,oBAAAA,YAAY,EAAZA;AAAF;AAHF,iBAAD,CAAL;AAKD,eAhBkB,CAFkB;AAAA;AAAA,qBAoB/BU,OAAO,CAACC,GAAR,CAAYd,UAAZ,CApB+B;;AAAA;AAAA,gDAsB9BT,QAAQ,CAAC;AACdK,gBAAAA,IAAI,EAAER,YADQ;AAEdS,gBAAAA,OAAO,EAAE;AAFK,eAAD,CAtBsB;;AAAA;AAAA;AAAA;AAAA,gDA2B9BN,QAAQ,CAAC;AAAEK,gBAAAA,IAAI,EAAE,OAAR;AAAiBC,gBAAAA,OAAO;AAAxB,eAAD,CA3BsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import axios from \"axios\";\n\n// Redux types\nimport { CREATE_ORDER, ORDER_PLACED } from \"./order.type\";\n\nexport const createOrder = (amount) => async (dispatch) => {\n  try {\n    const order = await axios({\n      method: \"POST\",\n      url: \"http://localhost:4000/payments/new\",\n      data: { amount },\n    });\n\n    return dispatch({ type: CREATE_ORDER, payload: order.data });\n  } catch (error) {\n    return dispatch({ type: \"ERROR\", payload: error });\n  }\n};\n\nexport const orderPlaced = (cartData) => async (dispatch) => {\n  try {\n    const placeOrder = cartData.map((foodItem) => {\n      const orderDetails = {\n        food: foodItem._id,\n        quantity: foodItem.quantity,\n        paymode: \"ONLINE\",\n        paymentDetails: {\n          itemTotal: foodItem.totalPrice,\n          promo: 0,\n          tax: 0,\n        },\n      };\n      axios({\n        method: \"POST\",\n        url: `http://localhost:4000/order/new`,\n        data: { orderDetails },\n      });\n    });\n\n    await Promise.all(placeOrder);\n\n    return dispatch({\n      type: ORDER_PLACED,\n      payload: {},\n    });\n  } catch (error) {\n    return dispatch({ type: \"ERROR\", payload: error });\n  }\n};"]},"metadata":{},"sourceType":"module"}